name: test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Prepare Source Project
      run: |
        mkdir -p ${{github.workspace}}/thirdparty/project-cpp/build
        mkdir -p ${{github.workspace}}/testinstalldir

    - name: Configure CMake for Source Project
      working-directory: ${{github.workspace}}/thirdparty/project-cpp/build
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake ../ -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build Source Project
      working-directory: ${{github.workspace}}/thirdparty/project-cpp/build
      # Build your program with the given configuration
      run: make

    - name: Install Source Project
      working-directory: ${{github.workspace}}/thirdparty/project-cpp/build
      # Build your program with the given configuration
      run: sudo make install

    - name: Run sys crate tests
      working-directory: ${{github.workspace}}/project-sys
      run: cargo test --verbose

    - name: Run api crate tests
      working-directory: ${{github.workspace}}/project-rs
      run: cargo test --verbose
